import cv2
import time
import mediapipe as mp
import keyboard
import rtmidi
from rtmidi.midiconstants import (CONTROL_CHANGE)

midiout = rtmidi.MidiOut()
midiout.open_port(1)
TEMPO = 0.2
out_min = 60
out_max = 72
cap = cv2.VideoCapture(0)
mpHands = mp.solutions.hands
hands = mpHands.Hands(static_image_mode=False,
                      max_num_hands=2,
                      min_detection_confidence=0.5,
                      min_tracking_confidence=0.5)

mpDraw = mp.solutions.drawing_utils


def convert_range(value, in_min, in_max, out_min, out_max):
    return out_min + (value - in_min) / (in_max - in_min) * (out_max - out_min)


def send_notes(pitch=60, repeat=1):
    for i in range(repeat):
        note_on = [0x90, pitch, 112]
        note_off = [0x80, pitch, 0]
        midiout.send_message(note_on)
        time.sleep(TEMPO)
        midiout.send_message(note_off)


def send_mod(cc=1, value=1):
    mod1 = ([CONTROL_CHANGE | 0, cc, value])
    # print(value)
    if value > 0.0:
        midiout.send_message(mod1)


while True:
    success, img = cap.read()
    img = cv2.flip(img, 1)
    imgRGB = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    results = hands.process(imgRGB)
    if results.multi_hand_landmarks:
        h, w, c = img.shape
        for hand_landmarks in results.multi_hand_landmarks:
            pink_x = hand_landmarks.landmark[mpHands.HandLandmark.PINKY_TIP].x
            pink_y = hand_landmarks.landmark[mpHands.HandLandmark.PINKY_TIP].y
            if pink_x < 0.5:
                if (round(pink_y * h)) in range(1, 180):
                    v1 = convert_range(pink_x, 0.5, 0, 0, 127)
                    send_mod(1, v1)
                if (round(pink_y * h)) in range(181, 360):
                    v2 = convert_range(pink_x, 0.5, 0, 0, 127)
                    send_mod(2, v2)
                if (round(pink_y * h)) in range(361, 540):
                    v3 = convert_range(pink_x, 0.5, 0, 0, 127)
                    send_mod(3, v3)
                if (round(pink_y * h)) in range(541, 720):
                    v4 = convert_range(pink_x, 0.5, 0, 0, 127)
                    send_mod(4, v4)
            if pink_x > 0.5:
                if round(pink_y * h) in range(0, 720):
                    v6 = convert_range(pink_y, 1, 0, out_min, out_max)
                    send_notes(v6, 1)
            mpDraw.draw_landmarks(img, hand_landmarks, mpHands.HAND_CONNECTIONS)
    if keyboard.is_pressed('z'):
        out_min += 12
        out_max += 12
    elif keyboard.is_pressed('x'):
        out_min -= 12
        out_max -= 12

    fps = 1
    cv2.imshow("Webcam", img)
    cv2.waitKey(fps)
